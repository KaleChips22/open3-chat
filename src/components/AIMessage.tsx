import { memo } from "react"
import { LoadingDots } from "./ui/loading-dots"
import { Accordion, AccordionContent, AccordionItem, AccordionTrigger } from "./ui/accordion"
import remarkGfm from "remark-gfm"
import { Markdown } from "node_modules/react-markdown/lib"
import { CheckIcon, CopyIcon } from "lucide-react"
import { CodeBlock } from "./CodeBlock"
import { bundledLanguages } from "shiki"
import models from "@/models/models"

const AIMessage = memo(({ message }: { message: { content: string, model: string, isComplete: boolean, reasoning?: string } }) => {
  return (
    <div className="w-full">
      <div className="whitespace-pre-wrap break-words text-sm leading-relaxed text-neutral-100 max-w-[100%] md:max-w-[80%] markdown">
        {message.reasoning === "" && message.content === "" ? (
          <LoadingDots className="mt-2" />
        ) : (
          <>
            {message.reasoning && (
              <Accordion type="single" collapsible className="w-full" defaultValue="">
                <AccordionItem value="reasoning">
                    <AccordionTrigger className="text-sm text-neutral-300 hover:text-neutral-100 cursor-pointer">
                      Reasoning
                    </AccordionTrigger>
                  <AccordionContent className="text-sm text-neutral-300">
                    {message.reasoning}
                  </AccordionContent>
                </AccordionItem>
              </Accordion>
            )}
            <Markdown
              remarkPlugins={[remarkGfm]}
              components={{
                pre: ({ node, ...props }) => {
                  // @ts-ignore
                  const language = (node?.children?.[0]?.properties?.className?.[0] || "language-text").replace('language-', '')
                  return <div className="flex flex-col gap-0 mb-2">
                    <div className="py-2 px-4 text-sm text-[oklch(0.80_0.05_300)] bg-neutral-800 flex items-center justify-between">
                      <span>{language}</span>
                      <div>
                        <CopyIcon
                          className="h-full aspect-square hover:bg-zinc-700 p-1.25 rounded-sm cursor-pointer hover:text-zinc-100 transition-all"
                          //@ts-ignore
                          onClick={() => navigator.clipboard.writeText(node.children[0].children[0].value)}
                        />
                      </div>
                    </div>
                    <CodeBlock lang={Object.keys(bundledLanguages).includes(language) ? language : 'text'}>
                      {/* @ts-ignore */}
                      {node.children[0].children[0].value}
                    </CodeBlock>
                  </div>
                }
              }}
            >{message.content}</Markdown>
          </>
        )}
        <div className="mt-1 text-xs text-neutral-500 flex flex-row items-center gap-1">
          Generated by {models.find((model) => model.id === message.model)?.name}
          {message.isComplete && <CheckIcon className="size-4 text-green-500" />}
        </div>
      </div>
    </div>
  )
})

export default AIMessage