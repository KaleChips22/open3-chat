import { memo, useMemo } from "react"
import { LoadingDots } from "./ui/loading-dots"
import { Accordion, AccordionContent, AccordionItem, AccordionTrigger } from "./ui/accordion"
import remarkGfm from "remark-gfm"
import { Markdown } from "node_modules/react-markdown/lib"
import { CheckIcon, CopyIcon, GitBranchIcon } from "lucide-react"
import CodeBlock from "./CodeBlock"
import { bundledLanguages } from "shiki"
import models from "@/models/models"
import { Tooltip, TooltipContent, TooltipTrigger } from "./ui/tooltip"

const AIMessage = memo(({ message, onMessageBranch }: { message: { content: string, model: string, isComplete: boolean, reasoning?: string }, onMessageBranch: () => void }) => {
  const messageActions = useMemo(() => [
    {
      icon: CopyIcon,
      onClick: () => navigator.clipboard.writeText(message.content),
      tooltip: "Copy message"
    },
    {
      icon: GitBranchIcon,
      onClick: onMessageBranch,
      tooltip: "Branch chat"
    },
  ], [message.content, onMessageBranch])

  // Memoize the markdown components to prevent unnecessary re-renders
  const markdownComponents = useMemo(() => ({
    pre: ({ node, ...props }: any) => {
      const language = (node?.children?.[0]?.properties?.className?.[0] || "language-text").replace('language-', '')
      const codeContent = node?.children?.[0]?.children?.[0]?.value || ''
      
      return (
        <div className="flex flex-col gap-0 mb-2">
          <div className="py-2 px-4 text-sm text-[oklch(0.80_0.05_300)] bg-neutral-800 flex items-center justify-between">
            <span>{language}</span>
            <div>
              <CopyIcon
                className="h-full aspect-square hover:bg-zinc-700 p-1.25 rounded-sm cursor-pointer hover:text-zinc-100 transition-all"
                onClick={() => navigator.clipboard.writeText(codeContent)}
              />
            </div>
          </div>
          <CodeBlock 
            lang={Object.keys(bundledLanguages).includes(language) ? language : 'text'}
            key={`${language}-${codeContent.substring(0, 50)}`}
          >
            {codeContent}
          </CodeBlock>
        </div>
      )
    }
  }), [])

  return (
    <div className="w-full group/aiMessage">
      <div className="whitespace-pre-wrap break-words text-sm leading-relaxed text-neutral-100 max-w-[100%] md:max-w-[80%] markdown flex flex-row items-start justify-between gap-2">
        {message.reasoning === "" && message.content === "" ? (
          <LoadingDots className="mt-2" />
        ) : (
          <>
            {message.reasoning && (
              <Accordion type="single" collapsible className="w-full" defaultValue="">
                <AccordionItem value="reasoning">
                    <AccordionTrigger className="text-sm text-neutral-300 hover:text-neutral-100 cursor-pointer">
                      Reasoning
                    </AccordionTrigger>
                  <AccordionContent className="text-sm text-neutral-300">
                    {message.reasoning}
                  </AccordionContent>
                </AccordionItem>
              </Accordion>
            )}
            <Markdown
              remarkPlugins={[remarkGfm]}
              components={markdownComponents}
            >{message.content}</Markdown>
          </>
        )}
        <div className="mt-1 text-xs text-neutral-500 flex flex-row items-center gap-1">
          Generated by {models.find((model) => model.id === message.model)?.name}
          {message.isComplete && <CheckIcon className="size-4 text-green-500" />}
        </div>
        <div className="flex flex-row items-center gap-1">
          {messageActions.map((action, index) => (
            <Tooltip key={index}>
              <TooltipTrigger asChild>
                <action.icon 
                  className="size-8 group-hover/aiMessage:text-accent text-accent sm:text-transparent group-hover/aiMessage:hover:text-white cursor-pointer p-2 hover:bg-neutral-800 rounded-md" 
                  onClick={action.onClick}
                />
              </TooltipTrigger>
              <TooltipContent>{action.tooltip}</TooltipContent>
            </Tooltip>
          ))}
        </div>
      </div>
    </div>
  )
})

export default AIMessage